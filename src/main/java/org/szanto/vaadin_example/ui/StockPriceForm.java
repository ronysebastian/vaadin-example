package org.szanto.vaadin_example.ui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vaadin.Application;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.ProgressIndicator;
import com.vaadin.ui.Slider;
import com.vaadin.ui.Slider.ValueOutOfBoundsException;
import org.vaadin.navigator.Navigator;

public class StockPriceForm extends CustomComponent implements Navigator.View {
	
	@AutoGenerated
	private AbsoluteLayout mainLayout;


	@AutoGenerated
	private CheckBox checkBoxRunning;


	@AutoGenerated
	private Slider sliderInterval;


	@AutoGenerated
	private Label labelChange;


	@AutoGenerated
	private ProgressIndicator progressIndicator_1;


	@AutoGenerated
	private Label labelStockPrice;


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	private static final long serialVersionUID = -8272436570203796177L;

	private WorkThread workThread;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @throws ValueOutOfBoundsException 
	 */
	public StockPriceForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		//labelChange.setImmediate(true);
		//labelStockPrice.setImmediate(true);
		
		progressIndicator_1.setPollingInterval(500);
		progressIndicator_1.setVisible(false);
		
		sliderInterval.setMax(1000);
		sliderInterval.setMin(20);
		try {
			sliderInterval.setValue(500);
		} catch (ValueOutOfBoundsException e) {
			e.printStackTrace();
		}
		
		checkBoxRunning.setImmediate(true);
		
		checkBoxRunning.addListener(new ClickListener() {
			
			private static final long serialVersionUID = -2441688859315025261L;

			public void buttonClick(ClickEvent event) {
					
				if ((Boolean)checkBoxRunning.getValue())  { 
					workThread = new WorkThread();
					workThread.start();
					progressIndicator_1.setVisible(true);
				} else {
					workThread.stopExecution();
					progressIndicator_1.setVisible(false);
				}
			}
			
		});

	}
	
	class WorkThread extends Thread {
		
		private boolean running = true;
		private double price = 100;
		
		private double trimDouble(double d) {
        	int i = (int)(d * 1000);
        	return i / 1000d;
		}
		
		public void run () {
	        double change;
	        
	        while (running) {
	        	
	        	change = Math.random() - 0.5;
	     		price += change;
	     		
	     		String color;
	     		if (change >= 0) {
	     			color = "green";
	     		} else {
	     			color = "red";
	     		}
	        	
	        	labelStockPrice.setValue("<br /><font size='20'>" + trimDouble(price) + "</font><br /><br />");
	        	labelChange.setValue("<br /><font size='20' color='" + color + "'>" + trimDouble(change) + "</font><br /><br />");
	        	logger.debug("new price is : " + price + " change is " + change);

	    		progressIndicator_1.setPollingInterval(((Double)sliderInterval.getValue()).intValue());

	        	
	        	try {
					sleep(((Double)sliderInterval.getValue()).longValue());
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
	        }
		}
		
		public void stopExecution() {
			running = false;
		}
	}
	

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// labelStockPrice
		labelStockPrice = new Label();
		labelStockPrice.setCaption("Price");
		labelStockPrice.setImmediate(false);
		labelStockPrice.setWidth("-1px");
		labelStockPrice.setHeight("-1px");
		labelStockPrice.setValue("<br /><font size='20'>0</font><br /><br />");
		labelStockPrice.setContentMode(3);
		mainLayout.addComponent(labelStockPrice, "top:24.0px;left:300.0px;");
		
		// progressIndicator_1
		progressIndicator_1 = new ProgressIndicator();
		progressIndicator_1.setImmediate(false);
		progressIndicator_1.setWidth("470px");
		progressIndicator_1.setHeight("-1px");
		mainLayout.addComponent(progressIndicator_1, "top:91.0px;left:10.0px;");
		
		// labelChange
		labelChange = new Label();
		labelChange.setCaption("Change");
		labelChange.setImmediate(false);
		labelChange.setWidth("-1px");
		labelChange.setHeight("-1px");
		labelChange.setValue("<br /><font size='20'>0</font><br /><br />");
		labelChange.setContentMode(3);
		mainLayout.addComponent(labelChange, "top:24.0px;left:10.0px;");
		
		// sliderInterval
		sliderInterval = new Slider();
		sliderInterval.setCaption("Refresh interval");
		sliderInterval.setImmediate(false);
		sliderInterval.setWidth("470px");
		sliderInterval.setHeight("-1px");
		mainLayout.addComponent(sliderInterval, "top:158.0px;left:10.0px;");
		
		// checkBoxRunning
		checkBoxRunning = new CheckBox();
		checkBoxRunning.setCaption("Running");
		checkBoxRunning.setImmediate(false);
		checkBoxRunning.setWidth("-1px");
		checkBoxRunning.setHeight("-1px");
		mainLayout.addComponent(checkBoxRunning, "top:200.0px;left:10.0px;");
		
		return mainLayout;
	}


	public void init(Navigator navigator, Application application) {
	}


	public void navigateTo(String requestedDataId) {
	}


	public String getWarningForNavigatingFrom() {
		return "Are you sure you want to stop wathcing stock prices?";
	}

}
